package item51;

// 메서드 시그니처를 신중히 설계하라 !

// 이 요령들을 잘 활용하면 배우기 쉽고, 쓰기 쉬우며, 오류 가능성이 적은 API를 만들 수 있을 것이다.
// 1. 메서드 이름을 신중히 짓자.
// 2. 편의 메서드를 너무 많이 만들지 말자. 인터페이스도 마찬가지이다. 아주 자주 쓰일 경우에만 별도의 약칭 메서드를 두기 바란다. 확신이 서지 않으면 만들지 말자.
// 3. 매개변수 목록은 짧게 유지하자. 4개 이하가 좋다. 특히 같은 타입의 매개변수 여러 개가 연달아 나오는 경우가 특히 해롭다
// 사용자가 매개변수 순서를 기억하기 어려울뿐더러, 실수로 순서를 바꿔 입력해도 그대로 컴파일되고 실행된다. 단지 의도와 다르게 동작할 뿐이다.

// 과하게 긴 매개변수 목록을 짧게 줄여주는 기술 세가지
// 1. 여러 메서드로 쪼갠다.잘못하면 메서드가 너무 많아질 수 있지만, 직교성을 높여 오히려 메서드 수를 줄여주는 효과도 있다.
// 2. 매개변수 여러 개를 묶어주는 도우미 클래스를 만드는것이다. 특히 잇따른 매개변수 몇 개를 독립된 하나의 개념으로 볼 수 있을 때 추천하는 기업이다.
// 3. 앞선 두 기법을 혼합한 것으로, 객체 생성에 사용한 빌더 패턴을 메서드 호출에 응용한다고 보면 된다.
// 이 기법은 매개변수가 많을 때, 특히 그중 일부는 생략해도 괜찮을 때 도움이 된다.
// 먼저 모든 매개변수를 하나의 추상화한 객체를 정의하고, 클라이언트에서 이 객체의 세터 메서드를 호출해 필요한 값을 설정하게 하는 것
// 매개변수를 다 설정한 다음, execute 메서드를 호출해 앞서 설정한 매개변수들의 유효성을 검사한다.

// 매개변수의 타입으로 클래스보다는 인터페이스가 더 낫다. 매개변수로 적합한 인터페이스가 있다면 그 인터페이스를 직접 사용하자. 
// Map을 사용한다면 HashMap 뿐 아니라 TreeMap, ConcurrentHashMap의 부분맵 등 어떤 Map구현체도 인수로 건넬 수 있다.
// 심지어 아직 존재하지 않는 Map도 가능하다

// 또한 boolean보다는 원소 2개짜리 열거 타입이 낫다. (메서드 이름상 boolean을 받아야 의미가 더 명확할 때는 예외다.)
class MethodName {

}
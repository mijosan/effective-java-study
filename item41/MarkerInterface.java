// 정의하려는 것이 타입이라면 마커 인터페이스를 사용하라 !

// 아무 메서드도 담고 있지 않고, 단지 자신을 구현하는 클래스가 특정 속성을 가짐을 
// 표시해주는 인터페이스를 마커 인터페이스라 한다. (ex Serializable 인터페이스)

// 마커 애너테이션보다 마커 인터페이스의 장점
// 1. 마커 인터페이스는 이를 구현한 클래스의 인스턴스들을 구분하는 타입으로 쓸수 있느나, 마커 애너테이션은 그렇지 않다.
// 마커 인터페이스는 어엿한 타입이기 떄문에, 마커 애너테이션을 사용했다면 런타임에야 발견될 오류를 컴파일타임에 잡을 수 있다.

// 2. 마커 인터페이스가 나은 점 두 번째는 적용 대상을 더 정밀하게 지정할 수 있다는 것이다.
// 적용 대상(@Target)을 ElementType.TYPE으로 선언한 애너테이션은 모든 타입에 달 수 있다. 부착 할 수 있는 타입을 더 세밀하게 제한하지는 못한다는 뜻이다.
// 마커 인터페이스는 그냥 마킹하고 싶은 클래스에서만 그 인터페이스를 구현 하면 된다.
// 그러면 마킹된 타입은 자동으로 그 인터페이스의 하위 타입임이 보장되는 것이다.

// 반대로 마커 애너테이션이 마커 인터페이스보다 나은 점으로는 거대한 애너테이션 시스템의 지원을 받는다는 점을 들 수 있다.
// 따라서 애너테이션을 적극 활용하는 프레임워크에서는 마커 애너테이션을 쓰는 쪽이 일관성을 지키는 데 유리할 것이다.

// 확실한 것은, 클래스와 인터페이스 외의 프로그램 요소(모듈, 패키지, 필드, 지역변수 등)에 마킹해야 할 때 애너테이션을 쓸 수밖에 없다.
// 클래스와 인터페이스만이 인터페이스를 구현하거나 확장할 수 있기 때문이다.

// 마커 인터페이스는 언제 써야 할까 ?
// 마커를 클래스나 인터페이스에 적용해야 한다면 이 마킹이 된 객체를 매개변수로 받는 메서드를 작성할 일이 있을까? 라고 자문해보자
// 답이 그렇다 이면 마커 인터페이스를 써야 한다.
// 이렇게 하면 그 마커 인터페이스를 해당 메서드의 매개변수 타입으로 사용하여 컴파일타임에 오류를 잡아낼 수 있다.

public interface MarkerInterface {
    
}

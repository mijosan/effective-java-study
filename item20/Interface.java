package item20;

// 추상 클래스보다는 인터페이스를 우선하라 !

// 둘의 가장 큰 차이는 추상 클래스가 정의한 타입을 구현하는 클래스는 반드시
// 추상 클래스의 하위 클래스가 되어야 한다는 점이다.
// 자바는 단일 상속만 지원하니, 추상 클래스 방식은 새로운 타입을 정의하는 데 커다란 제약을 안게 된다.
// 인터페이스가 선안한 메서드를 모두 정의하고 그 일반 규약을 잘 지킨 클래스라면
// 다른 어떤 클래스를 상속 했든 같은 타입으로 취급된다.
// 인터페이스는 믹스인 정의에 안성맞춤이다. 믹스인이란 클래스가 구현할 수 있는 타입으로,
// 믹스인을 구현한 클래스에 원래의 '주된 타입' 외에 도 특정 선택적 행위를 제공한다고 선언하는 효과를 준다.
// 예컨대 Comparable은 자신을 구현한 클래스의 인스턴스들끼리는 순서를 정할 수 있다고 선언하는 믹스인 인터페이스다.
// 이처럼 대상 타입의 주된 기능에 선택적 기능을 '혼합' 한다고 해서 믹스인이라 부른다.
// 인터페이스로는 계층구조가 없는 타입 프레임워크를 만들 수 있다. 타입을 계층적으로 정의하면 수많은 개념을 구조적으로 잘 표현할 수 있지만,
// 현실에는 계층을 엄격히 구분하기 어려운 개념도 있다.
// 래퍼 클래스 관용구와 함께 사용하면 인터페이스는 기능을 향상시키는 안전하고 강력한 수단이 된다.
// 인터페이스는 인스턴스 필드를 가질 수 없고 public이 아닌 정적 멤버도 가질 수 없다. (private 정적 메서드는 예외다.)
// 마지막으로, 내가 만든 인터페이스외에는 디폴트 메서드를 추가할 수 없다.
public class Interface implements Test {

    @Override
    public void testMethod() {
        System.out.println("하이2");
    }

    public static void main(String[] args) {
        Interface in = new Interface();

        System.out.println(in.name);
        in.testMethod();
    }

}
